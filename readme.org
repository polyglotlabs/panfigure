* Panfigure

An opinionated, declarative configuration utility for Go CLI applications, using Viper/Cobra.
Panfigure relies completely on Viper, and on Cobra for CLI options.
The point of the library is to ease the process of creating a configuration that is from multiple sources (file, environment, and CLI) and cascades in a predictable way.

It also provides configuration status output including the value for each config as well as the source that provided it.

** Usage
The library allows configuration through:

 1. CLI flags
 2. Environment variables
 3. config file

	Flags take precendence over ENV, which takes precedence over the config files.

	The convention for setting values begins with the key in the config file, which is all lowercase, underscore separated.  The ENV VAR is all uppercase, underscore separated, and begin with a prefix.  The CLI options are all lowercase, hyphen separated, POSIX style.

*** Quickstart
The bones of your configuration are ~CommandOptions~.  See the examples folder for some ideas of what that can look like.

Once commands and options are created, you can run a very simple application that displays all detected configurations in the terminal:

See all the keys that you've configured with:

#+begin_src go
  package main

  import (
	  "log"

	  "github.com/polyglotlabs/panfigure"
	  "github.com/spf13/cobra"
  )

  func main() {
	  cobra.CheckErr(panfigure.Configure())
	  status := panfigure.StatusTable([]string{})
	  log.Println(status)
  }
#+end_src


*** The CommandOptions type
panfigure.CommandOptions declare the configuration parameters available to a cobra.Command.

TODO enumerate important fields.

See examples.

*** File Configuration
Panfigure allows reading of all configuration keys from a file (of any type supported by Viper).
/Keys are nested under the subcommands that they apply to!/
So configurations that are applied to the root command are not nested.  For example:

In command like ~myapp --verbose start --host localhost~

The keys in viper will be ~verbose~  and ~start.host~.

Using configuration files requires some small setup in your application:

1. declare search paths for config file
2. optionally declare a config file type eg. JSON
3. declare config file names

   #+begin_src go
	 // in order search these directories until a config file is found
	 configPaths := []string{
		 "/etc/myapp",
		 "$HOME/.myapp",
		 ".",
	 }

	 // config_paths is a special config, reserved by panfigure for your convenience
	 viper.Set("config_paths", configPaths)
	 // OR
	 viper.AddConfigPath("/etc/myapp")

	 viper.SetConfigType("json")
	 panfigure.UseConfigFile("name-of-config")

	 // multiple values are acceptable - both will be searched
	 panfigure.UseConfigFile("also-use-this-config-file")

	 // if viper.SetConfigType is not called
	 panfigure.UseConfigFile("name-of-config.yml")
   #+end_src

Once set up panfigure will read all config files and merge them together in the order declared.

Since the intent of panfigure is to ease the setup of these configurations, the ~config_paths~ key is reserved for this purpose, if you like.  This makes it easy to pass the ~--config-paths~ CLI option to set this value at runtime if desired.  See ~examples/reserved_keys.go~  Otherwise it can be set programatically as above.

All filetypes supported by Viper will be supported here.

If no config paths are provided, panfigure will not look for any config files.

If no config files are provided, file configuration will not be used.

*** Environment Configuration

Environment configuration is a simple wrapper for ~viper.AutomaticEnv~ and will lazy load all defined configs found in the environment, optionally with env_prefix.  If no env_prefix is provided, Viper will attempt to find an exact match.

Because of the nesting capabilities of panfigure, the keys are delimited with ~.~.
panfigure replacers those with ~_~ for purposes of ENV vars.

For example using env_prefix ~MYAPP~:
~start.host~ will correspond to ~MYAPP_START_HOST~
~verbose~ will correspond to ~MYAPP_VERBOSE~

panfigure adds the following functionality:

1. Keeps track of configs found in the environment for reporting via status
2. Reserves another viper key ~env_prefix~.  Exactly the same as ~config_paths~.  This allows simple runtime configuration of env_prefix if desired.  See ~examples/reserved_keys.go~

*** Accessing Configurations in your Application

Once your commands are created, all configuration values are accessible on the global Viper instance.  All packages in your go modules will be able to access these configurations with (using examples above):

#+begin_src go
  host := viper.Get("start.host")
  // OR
  host := viper.GetString("start.host")

  verbose := viper.Get("verbose")
  // OR
  verbose := viper.GetBool("verbose")
#+end_src

See examples for more.
